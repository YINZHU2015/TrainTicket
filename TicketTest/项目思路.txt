代码在内存中实现了完整的售票以及余票查询逻辑，为了简化模型，不考虑方向问题。
代码核心逻辑是处理余票查询问题，保证每个乘客有座位，
解决办法是：将一条线路从起始站点开始到结束站点，标记上递增的唯一ID。比如S1站到S5站，那么就是S1站ID是1，依次递增，S5站ID是5。
查询余票逻辑的话就是在所有已售出车票的区段中查询出是否存在现有行程的区段的交集数为当前区间已售票数，（为了保证乘客经过的每一个区段都没有人），当前车辆总座位数减去已售出的票为余票数。

高并发抢票的逻辑应该是在服务器接口端使用消息队列高并发的获取售票请求，通过消息队列转换为单线程的数据流，后端排队入库。
为了保证高性能，可以考虑把所有已经售出票据信息存入缓存，同时使用内存数据库保存已售票信息，可以在插入本地数据的时候批量插入，供客户端查询余票使用。后端入库因为是单线程操作。
故使用事务（余票查询逻辑要在数据库实现）就应该是比较安全的了（数据库不建议使用多线程同时入库，因为数据库并发反而可能会严重影响入库性能）。
因为售票系统，理论上应该是查询功能比重是比较大的。所以可以将数据库进行读写分离，提高数据库效率。
